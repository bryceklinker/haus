// <auto-generated />
using System;
using Haus.Core.Common.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Haus.Core.Common.Storage.Migrations
{
    [DbContext(typeof(HausDbContext))]
    [Migration("20210221213641_AddHealthChecksToDatabase")]
    partial class AddHealthChecksToDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Haus.Core.Devices.Entities.DeviceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LightType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("RoomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Haus.Core.Devices.Entities.DeviceMetadataEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceMetadata");
                });

            modelBuilder.Entity("Haus.Core.Discovery.Entities.DiscoveryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Discovery");
                });

            modelBuilder.Entity("Haus.Core.Health.Entities.HealthCheckEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<double>("DurationOfCheckInMilliseconds")
                        .HasColumnType("REAL");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastUpdatedTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HealthCheckEntity");
                });

            modelBuilder.Entity("Haus.Core.Rooms.Entities.RoomEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Haus.Core.Devices.Entities.DeviceEntity", b =>
                {
                    b.HasOne("Haus.Core.Rooms.Entities.RoomEntity", "Room")
                        .WithMany("Devices")
                        .HasForeignKey("RoomId");

                    b.OwnsOne("Haus.Core.Lighting.Entities.LightingEntity", "Lighting", b1 =>
                        {
                            b1.Property<long>("DeviceEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("DeviceEntityId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceEntityId");

                            b1.OwnsOne("Haus.Core.Lighting.Entities.ColorLightingEntity", "Color", b2 =>
                                {
                                    b2.Property<long>("LightingEntityDeviceEntityId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<byte>("Blue")
                                        .HasColumnType("INTEGER");

                                    b2.Property<byte>("Green")
                                        .HasColumnType("INTEGER");

                                    b2.Property<byte>("Red")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("LightingEntityDeviceEntityId");

                                    b2.ToTable("Devices");

                                    b2.WithOwner()
                                        .HasForeignKey("LightingEntityDeviceEntityId");
                                });

                            b1.OwnsOne("Haus.Core.Lighting.Entities.LevelLightingEntity", "Level", b2 =>
                                {
                                    b2.Property<long>("LightingEntityDeviceEntityId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Max")
                                        .HasColumnType("REAL");

                                    b2.Property<double>("Min")
                                        .HasColumnType("REAL");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("LightingEntityDeviceEntityId");

                                    b2.ToTable("Devices");

                                    b2.WithOwner()
                                        .HasForeignKey("LightingEntityDeviceEntityId");
                                });

                            b1.OwnsOne("Haus.Core.Lighting.Entities.TemperatureLightingEntity", "Temperature", b2 =>
                                {
                                    b2.Property<long>("LightingEntityDeviceEntityId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Max")
                                        .HasColumnType("REAL");

                                    b2.Property<double>("Min")
                                        .HasColumnType("REAL");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("LightingEntityDeviceEntityId");

                                    b2.ToTable("Devices");

                                    b2.WithOwner()
                                        .HasForeignKey("LightingEntityDeviceEntityId");
                                });

                            b1.Navigation("Color");

                            b1.Navigation("Level");

                            b1.Navigation("Temperature");
                        });

                    b.Navigation("Lighting");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Haus.Core.Devices.Entities.DeviceMetadataEntity", b =>
                {
                    b.HasOne("Haus.Core.Devices.Entities.DeviceEntity", "Device")
                        .WithMany("Metadata")
                        .HasForeignKey("DeviceId");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Haus.Core.Rooms.Entities.RoomEntity", b =>
                {
                    b.OwnsOne("Haus.Core.Lighting.Entities.LightingEntity", "Lighting", b1 =>
                        {
                            b1.Property<long>("RoomEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("RoomEntityId");

                            b1.ToTable("Rooms");

                            b1.WithOwner()
                                .HasForeignKey("RoomEntityId");

                            b1.OwnsOne("Haus.Core.Lighting.Entities.ColorLightingEntity", "Color", b2 =>
                                {
                                    b2.Property<long>("LightingEntityRoomEntityId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<byte>("Blue")
                                        .HasColumnType("INTEGER");

                                    b2.Property<byte>("Green")
                                        .HasColumnType("INTEGER");

                                    b2.Property<byte>("Red")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("LightingEntityRoomEntityId");

                                    b2.ToTable("Rooms");

                                    b2.WithOwner()
                                        .HasForeignKey("LightingEntityRoomEntityId");
                                });

                            b1.OwnsOne("Haus.Core.Lighting.Entities.LevelLightingEntity", "Level", b2 =>
                                {
                                    b2.Property<long>("LightingEntityRoomEntityId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Max")
                                        .HasColumnType("REAL");

                                    b2.Property<double>("Min")
                                        .HasColumnType("REAL");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("LightingEntityRoomEntityId");

                                    b2.ToTable("Rooms");

                                    b2.WithOwner()
                                        .HasForeignKey("LightingEntityRoomEntityId");
                                });

                            b1.OwnsOne("Haus.Core.Lighting.Entities.TemperatureLightingEntity", "Temperature", b2 =>
                                {
                                    b2.Property<long>("LightingEntityRoomEntityId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<double>("Max")
                                        .HasColumnType("REAL");

                                    b2.Property<double>("Min")
                                        .HasColumnType("REAL");

                                    b2.Property<double>("Value")
                                        .HasColumnType("REAL");

                                    b2.HasKey("LightingEntityRoomEntityId");

                                    b2.ToTable("Rooms");

                                    b2.WithOwner()
                                        .HasForeignKey("LightingEntityRoomEntityId");
                                });

                            b1.Navigation("Color");

                            b1.Navigation("Level");

                            b1.Navigation("Temperature");
                        });

                    b.Navigation("Lighting");
                });

            modelBuilder.Entity("Haus.Core.Devices.Entities.DeviceEntity", b =>
                {
                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Haus.Core.Rooms.Entities.RoomEntity", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
