@using System.Reactive.Linq
@using System.Reactive.Subjects
@using Haus.Core.Models.Lighting
@implements IDisposable

@if (Lighting == null)
{
    <MudText Typo="Typo.h3">no lighting available</MudText>
}
else
{
    <MudGrid>
        <MudItem>
            <MudText Typo="Typo.h5">Room Lighting</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudSwitch T="bool"
                       Disabled="Disabled"
                       Value="Lighting.State == LightingState.On"
                       ValueChanged="HandleStateChanged">
                State (@Lighting.State)
            </MudSwitch>
        </MudItem>
        <MudItem xs="12">
            <MudSlider T="double"
                       Disabled="Disabled"
                       Min="Lighting.Level.Min"
                       Value="Lighting.Level.Value"
                       Max="Lighting.Level.Max"
                       UserAttributes="@CreateSliderAttributes("level")"
                       ValueChanged="HandleLevelChanged">
                Level (@Lighting.Level.Value %)
            </MudSlider>
        </MudItem>
        <MudItem xs="12">
            @if (Lighting.Temperature != null)
            {
                <MudSlider T="double"
                           Disabled="Disabled"
                           Min="Lighting.Temperature.Min"
                           Value="Lighting.Temperature.Value"
                           Max="Lighting.Temperature.Max"
                           UserAttributes="@CreateSliderAttributes("temperature")"
                           ValueChanged="HandleTemperatureChanged">
                    Temperature (@Lighting.Temperature.Value K)
                </MudSlider>
            }
        </MudItem>
        <MudItem xs="12">
            @if (Lighting.Color != null)
            {
                <MudGrid Class="mt-8 mb-16">
                    <MudItem xs="2">
                        <MudSlider T="byte"
                                   Disabled="Disabled"
                                   Min="0"
                                   Value="Lighting.Color.Red"
                                   Max="255"
                                   UserAttributes="@CreateSliderAttributes("red")"
                                   Immediate="true"
                                   Vertical="@true"
                                   ValueChanged="HandleRedChanged">
                            Red (@Lighting.Color.Red.ToHex())
                        </MudSlider>
                    </MudItem>
                    <MudItem xs="2">
                        <MudSlider T="byte"
                                   Disabled="Disabled"
                                   Min="0"
                                   Value="Lighting.Color.Green"
                                   Max="255"
                                   Immediate="true"
                                   UserAttributes="@CreateSliderAttributes("green")"
                                   Vertical="@true"
                                   ValueChanged="HandleGreenChanged">
                            Green (@Lighting.Color.Green.ToHex())
                        </MudSlider>
                    </MudItem>
                    <MudItem xs="2">
                        <MudSlider T="byte"
                                   Disabled="Disabled"
                                   Min="0"
                                   Value="Lighting.Color.Blue"
                                   Max="255"
                                   Immediate="true"
                                   UserAttributes="@CreateSliderAttributes("blue")"
                                   Vertical="true"
                                   ValueChanged="HandleBlueChanged">
                            Blue (@Lighting.Color.Blue.ToHex())
                        </MudSlider>
                    </MudItem>
                    <MudItem xs="2">
                        <MudPaper Class="pa-16" Style="@($"background-color: {Lighting.Color.ToHex()}")" />
                        <MudText>
                            @Lighting.Color.ToHex()
                        </MudText>
                    </MudItem>
                </MudGrid>
            }
        </MudItem>
    </MudGrid>
}

@code {
    private BehaviorSubject<LightingModel?> _lightingSubject = new(null);
    private IDisposable? _subscription; 
    
    [Parameter] public bool Disabled { get; set; }

    [Parameter]
    public LightingModel? Lighting
    {
        get => _lightingSubject.Value ?? null;
        set => ResetLightingSubject(value);
    }

    [Parameter] public EventCallback<LightingModel> OnLightingChanged { get; set; }

    protected override void OnInitialized()
    {
        ResetLightingSubject(Lighting);
    }

    private void HandleStateChanged(bool state)
    {
        ArgumentNullException.ThrowIfNull(Lighting);

        _lightingSubject.OnNext(Lighting with
        {
            State = state ? LightingState.On : LightingState.Off
        });
    }

    private void HandleLevelChanged(double level)
    {
        ArgumentNullException.ThrowIfNull(Lighting);

        _lightingSubject.OnNext(Lighting with
        {
            Level = Lighting.Level with
            {
                Value = level
            }
        });
    }

    private void HandleTemperatureChanged(double temp)
    {
        ArgumentNullException.ThrowIfNull(Lighting?.Temperature);

        _lightingSubject.OnNext(Lighting with
        {
            Temperature = Lighting.Temperature with
            {
                Value = temp
            }
        });
    }

    private void HandleRedChanged(byte red)
    {
        ArgumentNullException.ThrowIfNull(Lighting?.Color);

        _lightingSubject.OnNext(Lighting with
        {
            Color = Lighting.Color with
            {
                Red = red
            }
        });
    }

    private void HandleGreenChanged(byte green)
    {
        ArgumentNullException.ThrowIfNull(Lighting?.Color);

        _lightingSubject.OnNext(Lighting with
        {
            Color = Lighting.Color with
            {
                Green = green
            }
        });
    }

    private void HandleBlueChanged(byte blue)
    {
        ArgumentNullException.ThrowIfNull(Lighting?.Color);

        _lightingSubject.OnNext(Lighting with
        {
            Color = Lighting.Color with
            {
                Blue = blue
            }
        });
    }

    private Dictionary<string, object?> CreateSliderAttributes(string id)
    {
        return new Dictionary<string, object?>
        {
            { "id", id }
        };
    }

    private void ResetLightingSubject(LightingModel? lighting)
    {
        _subscription?.Dispose();
        _lightingSubject = new BehaviorSubject<LightingModel?>(lighting);
        _subscription = _lightingSubject
            .Throttle(TimeSpan.FromMilliseconds(300))
            .Select(l => InvokeAsync(() => OnLightingChanged.InvokeAsync(l)))
            .Subscribe();
    }

    public void Dispose()
    {
        _subscription?.Dispose();
    }

}