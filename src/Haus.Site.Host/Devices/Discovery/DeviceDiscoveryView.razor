@using Haus.Api.Client.Devices
@using Haus.Api.Client.Rooms
@using Haus.Core.Models.Devices
@using Haus.Core.Models.Rooms

@page "/devices/discovery"

@attribute [Authorize]

@inject IDeviceApiClient DevicesClient;
@inject IRoomsApiClient RoomsClient;

<LoadingContentView IsLoading="IsLoading" LoadingText="Loading rooms and devices...">
    <MudDropContainer T="DeviceModel" Items="Devices" ItemsSelector="IsDeviceInRoom" ItemDropped="HandleDeviceDropped">
        <ChildContent>
            <MudGrid>
                <MudItem xs="6">
                    @foreach (var room in Rooms)
                    {
                        <MudDropZone T="DeviceModel" Identifier="@room.Id.ToString()">
                            <MudText Typo="Typo.h3">@room.Name</MudText>
                        </MudDropZone>
                    }        
                </MudItem>
                <MudItem xs="6">
                    <MudDropZone T="DeviceModel"
                                 Identifier="@UnassignedDeviceRoomId">
                        <MudText Typo="Typo.h3">Unassigned Devices</MudText>
                    </MudDropZone>    
                </MudItem>
            </MudGrid>
        </ChildContent>
        <ItemRenderer>
            <MudPaper Class="device" >@context.DisplayText</MudPaper>
        </ItemRenderer>
    </MudDropContainer>
</LoadingContentView>


@code {
    private const string UnassignedDeviceRoomId = "unassigned";

    private RoomModel[] Rooms { get; set; } = [];
    private DeviceModel[] Devices { get; set; } = [];

    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        var roomsList = await RoomsClient.GetRoomsAsync();
        Rooms = roomsList.Items;

        var devicesList = await DevicesClient.GetDevicesAsync();
        Devices = devicesList.Items;
        IsLoading = false;
    }

    private static bool IsDeviceInRoom(DeviceModel device, string roomId)
    {
        if (device.RoomId == null)
        {
            return roomId == UnassignedDeviceRoomId;
        }

        return roomId == device.RoomId.ToString();
    }

    private async Task HandleDeviceDropped(MudItemDropInfo<DeviceModel> droppedItem)
    {
        if (droppedItem.Item == null)
        {
            return;
        }
        
        long.TryParse(droppedItem.DropzoneIdentifier, out var roomId);
        await RoomsClient.AddDevicesToRoomAsync(roomId, droppedItem.Item.Id);
        var devices = await DevicesClient.GetDevicesAsync();
        Devices = devices.Items;
    }

}