@using Haus.Core.Models
@using Haus.Core.Models.Health
@using Haus.Site.Host.Shared.Realtime
@using Microsoft.Extensions.Logging

@implements IAsyncDisposable

@inject IRealtimeDataFactory RealtimeDataFactory

<LoadingContentView IsLoading="State != RealtimeDataState.Connected" LoadingText="Connecting to health hub...">
    @if (LatestHealth != null)
    {
        <MudPaper>
            <MudText Class="health-status">@LatestHealth.Status</MudText>

            @foreach (var check in LatestHealth.Checks)
            {
                <HealthStatusCheckView Check="check"/>
            }
        </MudPaper>
    }
</LoadingContentView>

@code {
    private RealtimeDataState State => Subscriber?.State ?? RealtimeDataState.Disconnected;

    private IRealtimeDataSubscriber? Subscriber { get; set; }

    private HausHealthReportModel? LatestHealth { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Subscriber = await RealtimeDataFactory.CreateSubscriber(HausRealtimeSources.Health);
        Subscriber.Subscribe<HausHealthReportModel>("OnHealth", async report =>
        {
            LatestHealth = report;
            await InvokeAsync(StateHasChanged);
        });
        await Subscriber.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (Subscriber != null)
        {
            await Subscriber.DisposeAsync();
        }
    }

}