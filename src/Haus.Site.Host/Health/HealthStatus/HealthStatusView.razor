@using Haus.Core.Models
@using Haus.Core.Models.Health
@using Haus.Site.Host.Shared.Realtime

@implements IAsyncDisposable
@inject IRealtimeDataFactory RealtimeDataFactory

<LoadingContentView IsLoading="State != RealtimeDataState.Connected" LoadingText="Connecting to health hub...">
    <MudPaper>
        <MudText Class="health-status">@LatestHealth?.Status</MudText>
        
        @foreach (var check in HealthChecks)
        {
            <HealthStatusCheckView Check="check" />
        }
    </MudPaper>
</LoadingContentView>

@code {
    private RealtimeDataState State => Subscriber?.State ?? RealtimeDataState.Disconnected;
    
    private IRealtimeDataSubscriber? Subscriber { get; set; }
    
    private HausHealthReportModel? LatestHealth { get; set; }

    private HausHealthCheckModel[] HealthChecks => LatestHealth?.Checks ?? [];
    
    protected override async Task OnInitializedAsync()
    {
        Subscriber = await RealtimeDataFactory.CreateSubscriber(HausSignalRHubNames.Health);
        Subscriber.Subscribe<HausHealthReportModel>("OnHealth", async report =>
        {
            await InvokeAsync(() =>
            {
                LatestHealth = report;
                StateHasChanged();
            });
        });
        await Subscriber.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (Subscriber != null)
        {
            await Subscriber.DisposeAsync();
        }
    }

}