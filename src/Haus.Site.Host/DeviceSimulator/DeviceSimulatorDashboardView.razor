@page "/device-simulator"
@using Haus.Core.Models
@using Haus.Core.Models.DeviceSimulator
@using Haus.Site.Host.Shared.Realtime

@implements IAsyncDisposable

@inject IRealtimeDataFactory RealtimeDataFactory

<LoadingContentView IsLoading="State != RealtimeDataState.Connected">
    @if (SimulatorState != null)
    {
        @foreach (var simulatedDevice in SimulatorState.Devices)
        {
            <SimulatedDeviceView SimulatedDevice="simulatedDevice" />
        }
    }
</LoadingContentView>

@code {
    private IRealtimeDataSubscriber? _subscriber;
    
    private RealtimeDataState State => _subscriber?.State ?? RealtimeDataState.Disconnected;
    
    private DeviceSimulatorStateModel? SimulatorState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _subscriber = await RealtimeDataFactory.CreateSubscriber(HausRealtimeSources.DeviceSimulator);
        _subscriber.Subscribe<DeviceSimulatorStateModel>(DeviceSimulatorEventNames.OnState, async simulatorState =>
        {
            SimulatorState = simulatorState;
            await InvokeAsync(StateHasChanged);
        });
        await _subscriber.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_subscriber != null)
        {
            await _subscriber.DisposeAsync();
        }
    }
}