@using Haus.Api.Client.DeviceSimulator
@using Haus.Core.Models.Devices
@using Haus.Core.Models.DeviceSimulator
@using Haus.Core.Models.Lighting
@using Haus.Site.Host.Shared.Lighting

@attribute [Authorize]

@inject IDeviceSimulatorApiClient DeviceSimulatorClient;

@if (SimulatedDevice != null)
{
    <MudPaper>
        <MudTextField T="string"
                      InputId="id"
                      Disabled="true"
                      Value="SimulatedDevice.Id"/>

        <MudTextField T="string"
                      InputId="deviceType"
                      Disabled="true"
                      Value="SimulatedDevice.DeviceType.ToString()"/>

        <MudExpansionPanels>
            <MudExpansionPanel>
                <TitleContent>
                    <MudText Typo="Typo.h5">Metadata</MudText>
                </TitleContent>
                <ChildContent>
                    @foreach (var metadata in SimulatedDevice.Metadata)
                    {
                        <MudStack Row="true" Spacing="4" Class="mt-4">
                            <MudTextField T="string"
                                          Label="Key"
                                          InputId="key"
                                          Disabled="true"
                                          Value="metadata.Key"/>
                            <MudTextField T="string"
                                          Label="Value"
                                          InputId="value"
                                          Disabled="true"
                                          Value="metadata.Value" />
                        </MudStack>
                    }
                </ChildContent>
            </MudExpansionPanel>
            
            @if (SimulatedDevice?.DeviceType == DeviceType.Light && Lighting != null)
            {
                <MudExpansionPanel>
                    <TitleContent>
                        <MudText Typo="Typo.h5">Lighting</MudText>
                    </TitleContent>
                    <ChildContent>
                        <LightingView Disabled="true" 
                                      Lighting="Lighting" />
                    </ChildContent>
                </MudExpansionPanel>    
            }
            
            @if (IsMotionSensor)
            {
                <MudExpansionPanel>
                    <TitleContent>
                        <MudText Typo="Typo.h5">Occupancy</MudText>
                    </TitleContent>
                    <ChildContent>
                        <MudSwitch T="bool"
                                   Label="Is Occupied?"
                                   Value="IsOccupied"
                                   Disabled="true" />
                        <MudButton OnClick="HandleTriggerOccupancyChange">
                            Trigger Occupancy Change
                        </MudButton>
                    </ChildContent>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    </MudPaper>
}

@code {
    [Parameter] public SimulatedDeviceModel? SimulatedDevice { get; set; }

    public bool IsMotionSensor => SimulatedDevice?.DeviceType == DeviceType.MotionSensor;
    public bool IsOccupied => SimulatedDevice?.IsOccupied == true;

    public LightingModel? Lighting => SimulatedDevice?.Lighting;

    private async Task HandleTriggerOccupancyChange()
    {
        if (SimulatedDevice == null)
        {
            return;
        }

        await DeviceSimulatorClient.TriggerOccupancyChange(SimulatedDevice.Id);
    }
}